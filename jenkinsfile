/*import library*/
@Library('kartiklibrary') _

pipeline {
    agent any
    parameters {
        choice(
            choices: ['slack' , 'email', 'both'],
            description: 'notification method's',
            name: 'REQUESTED_ACTION')
    }
    stages{
           stage('build') {
              steps {
                   script { 
                       build()
                       echo "or Maven.mvn 'package' (using class in src)"
              }
            }
          }
          
          stage('notifications') {
   
            parallel {
                stage('email') {
                   when {
                        expression { params.REQUESTED_ACTION == 'email' }
                      }
                   steps {
                     script {
                      notification.email(currentBuild.currentResult)
                     }
                  }
                 } 
                stage('slack') {
                 when {
                        expression { params.REQUESTED_ACTION == 'email' }
                      }
                   steps {
                     script {
                      notification.slack(currentBuild.currentResult)
                     }
                  }
                 }
                stage('both'){ 
                 when {
                        expression { params.REQUESTED_ACTION == 'both' }
                      }
                   steps {
                     script {
                      notification.slack(currentBuild.currentResult)
                      notification.email(currentBuild.currentResult)
                     }
                  }
                 } 
                }
              }  
            
          
}          
